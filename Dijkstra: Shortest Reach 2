

class MinHeap {
    constructor() {
        this.heap = [];
    }

    insert(node) {
        this.heap.push(node);
        this.bubbleUp();
    }

    bubbleUp() {
        let index = this.heap.length - 1;
        while (index > 0) {
            let element = this.heap[index];
            let parentIndex = Math.floor((index - 1) / 2);
            let parent = this.heap[parentIndex];
            if (parent[1] <= element[1]) break;
            this.heap[index] = parent;
            this.heap[parentIndex] = element;
            index = parentIndex;
        }
    }

    extractMin() {
        const min = this.heap[0];
        const end = this.heap.pop();
        if (this.heap.length > 0) {
            this.heap[0] = end;
            this.sinkDown(0);
        }
        return min;
    }

    sinkDown(index) {
        let length = this.heap.length;
        let element = this.heap[index];
        while (true) {
            let leftChildIndex = 2 * index + 1;
            let rightChildIndex = 2 * index + 2;
            let leftChild, rightChild;
            let swap = null;

            if (leftChildIndex < length) {
                leftChild = this.heap[leftChildIndex];
                if (leftChild[1] < element[1]) swap = leftChildIndex;
            }

            if (rightChildIndex < length) {
                rightChild = this.heap[rightChildIndex];
                if (
                    (swap === null && rightChild[1] < element[1]) ||
                    (swap !== null && rightChild[1] < leftChild[1])
                ) swap = rightChildIndex;
            }

            if (swap === null) break;
            this.heap[index] = this.heap[swap];
            this.heap[swap] = element;
            index = swap;
        }
    }

    size() {
        return this.heap.length;
    }
}

function dijkstra(n, edges, s) {
    const distances = new Array(n + 1).fill(Infinity);
    distances[s] = 0;

    const adjacencyList = new Map();

    for (let i = 1; i <= n; i++) {
        adjacencyList.set(i, []);
    }

    // Build adjacency list
    for (let [u, v, w] of edges) {
        adjacencyList.get(u).push([v, w]);
        adjacencyList.get(v).push([u, w]);
    }

    const minHeap = new MinHeap();
    minHeap.insert([s, 0]);

    while (minHeap.size()) {
        const [currentNode, currentDistance] = minHeap.extractMin();

        // If we already processed this node with a shorter path, continue
        if (currentDistance > distances[currentNode]) continue;

        // Process all neighbors of the current node
        for (let [neighbor, weight] of adjacencyList.get(currentNode)) {
            let distance = currentDistance + weight;

            if (distance < distances[neighbor]) {
                distances[neighbor] = distance;
                minHeap.insert([neighbor, distance]);
            }
        }
    }

    const result = [];
    for (let i = 1; i <= n; i++) {
        if (i !== s) {
            result.push(distances[i] === Infinity ? -1 : distances[i]);
        }
    }
    return result;
}

// Example input and usage:
const n = 5; // Number of nodes
const edges = [
    [1, 2, 24],
    [1, 4, 20],
    [3, 1, 3],
    [4, 3, 12]
];
const s = 1; // Starting node

console.log(dijkstra(n, edges, s)); // Expected output: [0, 24, 3, 15, -1]